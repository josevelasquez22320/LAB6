
Postlab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000030c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080015e  0080015e  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a5  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f6  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  9e:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
}


void initUART9600(void){
	//configurara tx y rx
	DDRD &= ~(1<< DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<< DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//CONFIG REGISTRO A
	UCSR0A =0;
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	//CONFIGURAR REGISTO B HABILITAR ISR RX Y TX
	UCSR0B = 0;
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<< RXEN0) | (1<< TXEN0);
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24
	// CONFIGURAR REGISTRO C >FRAME: 8BITS DATOA, NOPARIDAD 1 DE STOP
	UCSR0C = 0;
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
	//VELICIDAD BAUDRATE= 9600
	UBRR0 =207;
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <mostrarTexto>:
}

//MIESTRAS NO SEA CIERTO () HAZ LO QUE ESTE ADENTRO HASTA QUE SE CUMPLA
	//ESPERAR A QUE UDR0 ESTE EN 1

void mostrarTexto(char* text){
  e4:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; text[i] != '\0'; i++)
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <mostrarTexto+0x14>
	{
		while(!(UCSR0A & (1 << UDRE0)));
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <mostrarTexto+0x6>
		UDR0 = text[i];
  f2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

//MIESTRAS NO SEA CIERTO () HAZ LO QUE ESTE ADENTRO HASTA QUE SE CUMPLA
	//ESPERAR A QUE UDR0 ESTE EN 1

void mostrarTexto(char* text){
	for (uint8_t i = 0; text[i] != '\0'; i++)
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	fa 01       	movw	r30, r20
  fa:	e2 0f       	add	r30, r18
  fc:	f1 1d       	adc	r31, r1
  fe:	30 81       	ld	r19, Z
 100:	31 11       	cpse	r19, r1
 102:	f3 cf       	rjmp	.-26     	; 0xea <mostrarTexto+0x6>
	{
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = text[i];
	}
}
 104:	08 95       	ret

00000106 <desplegar>:

//fun


void desplegar(void){
	mostrarTexto("\n\n\n   OPCIONES\n");
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <mostrarTexto>
	mostrarTexto("1. Leer potenciómetro\n");
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 72 00 	call	0xe4	; 0xe4 <mostrarTexto>
	mostrarTexto("2. Enviar ASCII\n");
 116:	87 e2       	ldi	r24, 0x27	; 39
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <mostrarTexto>
 11e:	08 95       	ret

00000120 <__vector_18>:
	}
}


//ISR, recieve
ISR(USART_RX_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	1f 92       	push	r1
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	bufferRX = UDR0;
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <bufferRX>
	
	//if buffer is emptym, if it is not, it waits
	while(!(UCSR0A & (1 << UDRE0)));
 154:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 158:	85 ff       	sbrs	r24, 5
 15a:	fc cf       	rjmp	.-8      	; 0x154 <__vector_18+0x34>
	char copiaB = bufferRX;
 15c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <bufferRX>
 160:	89 83       	std	Y+1, r24	; 0x01
	
	conversion = atoi(&copiaB);//con esa funcion numero lo convierte en entero no en caracter
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 5e 01 	call	0x2bc	; 0x2bc <atoi>
 16a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <conversion>
	
	if (envioDato == 0){
 16e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <__data_end>
 172:	91 11       	cpse	r25, r1
 174:	2a c0       	rjmp	.+84     	; 0x1ca <__vector_18+0xaa>
		//op 1 ver que hacemos 
		switch (conversion){
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	19 f0       	breq	.+6      	; 0x180 <__vector_18+0x60>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	79 f0       	breq	.+30     	; 0x19c <__vector_18+0x7c>
 17e:	22 c0       	rjmp	.+68     	; 0x1c4 <__vector_18+0xa4>
			case 1:
				funcion = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <funcion>
				UDR0 = bufferRX;
 186:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <bufferRX>
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				mostrarTexto("\n\n");
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 72 00 	call	0xe4	; 0xe4 <mostrarTexto>
				desplegar();
 196:	0e 94 83 00 	call	0x106	; 0x106 <desplegar>
				break;
 19a:	26 c0       	rjmp	.+76     	; 0x1e8 <__vector_18+0xc8>
			//caso 2 esperara 2 turnos
			case 2:
				funcion = 0;
 19c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <funcion>
				envioDato = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
				UDR0 = bufferRX;
 1a6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <bufferRX>
 1aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				mostrarTexto("\nPor favor seleccioone un caracter");
 1ae:	8b e3       	ldi	r24, 0x3B	; 59
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 72 00 	call	0xe4	; 0xe4 <mostrarTexto>
				mostrarTexto("\n\n");
 1b6:	88 e3       	ldi	r24, 0x38	; 56
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 72 00 	call	0xe4	; 0xe4 <mostrarTexto>
				PORTD = 0;
 1be:	1b b8       	out	0x0b, r1	; 11
				PORTB = 0;
 1c0:	15 b8       	out	0x05, r1	; 5
				break;
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <__vector_18+0xc8>
			
			default:
			funcion = 0;
 1c4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <funcion>
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <__vector_18+0xc8>
		}
		
	}else {
		envioDato = 0;
 1ca:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
		UDR0 = bufferRX;
 1ce:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <bufferRX>
 1d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		PORTB = bufferRX;
 1d6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <bufferRX>
 1da:	85 b9       	out	0x05, r24	; 5
		PORTD = 0xC0 & bufferRX;
 1dc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <bufferRX>
 1e0:	80 7c       	andi	r24, 0xC0	; 192
 1e2:	8b b9       	out	0x0b, r24	; 11
		desplegar();
 1e4:	0e 94 83 00 	call	0x106	; 0x106 <desplegar>
	}
}
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <initADC>:


// ADC

void initADC(void){
	ADMUX = 0;
 210:	ec e7       	ldi	r30, 0x7C	; 124
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	10 82       	st	Z, r1
	//5Vs
	ADMUX |= (1 << REFS0);
 216:	80 81       	ld	r24, Z
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 21c:	80 81       	ld	r24, Z
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	
 222:	80 81       	ld	r24, Z
 224:	80 62       	ori	r24, 0x20	; 32
 226:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 228:	ea e7       	ldi	r30, 0x7A	; 122
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	
 22e:	80 81       	ld	r24, Z
 230:	80 68       	ori	r24, 0x80	; 128
 232:	80 83       	st	Z, r24
	//convertir ADC
	ADCSRA |= (1 << ADIE);	//INTERRUPCION
 234:	80 81       	ld	r24, Z
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 83       	st	Z, r24
	
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 23a:	80 81       	ld	r24, Z
 23c:	87 60       	ori	r24, 0x07	; 7
 23e:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);	//PC0 COMO ENTRADA
 240:	ee e7       	ldi	r30, 0x7E	; 126
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
 24a:	08 95       	ret

0000024c <main>:



int main(void)
{
	cli();
 24c:	f8 94       	cli
	DDRD = 0xC0;		//PD6 y PD7 as output
 24e:	80 ec       	ldi	r24, 0xC0	; 192
 250:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;		//PB0 - PB7 as output
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1 << PINC0);	//PC0 ENTRADA
 256:	87 b1       	in	r24, 0x07	; 7
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	87 b9       	out	0x07, r24	; 7
	
	initUART9600();
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC();
 260:	0e 94 08 01 	call	0x210	; 0x210 <initADC>
	sei();
 264:	78 94       	sei
//habilitar interrupciones desplegar desplegar
	desplegar();
 266:	0e 94 83 00 	call	0x106	; 0x106 <desplegar>
	
    while (1) 
    {
		if (funcion == 1){
 26a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <funcion>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	69 f4       	brne	.+26     	; 0x28c <main+0x40>
			ADCSRA |= (1 << ADSC);
 272:	ea e7       	ldi	r30, 0x7A	; 122
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
			PORTB = ADCH;
 27c:	e9 e7       	ldi	r30, 0x79	; 121
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	85 b9       	out	0x05, r24	; 5
			PORTD = 0xC0 & ADCH;
 284:	80 81       	ld	r24, Z
 286:	80 7c       	andi	r24, 0xC0	; 192
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	ef cf       	rjmp	.-34     	; 0x26a <main+0x1e>
		}else{
			funcion = 0;
 28c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <funcion>
 290:	ec cf       	rjmp	.-40     	; 0x26a <main+0x1e>

00000292 <__vector_21>:
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
	
	DIDR0 |= (1 << ADC0D);	//PC0 COMO ENTRADA
}

ISR (ADC_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	
 2a2:	ea e7       	ldi	r30, 0x7A	; 122
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	80 61       	ori	r24, 0x10	; 16
 2aa:	80 83       	st	Z, r24
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <atoi>:
 2bc:	fc 01       	movw	r30, r24
 2be:	88 27       	eor	r24, r24
 2c0:	99 27       	eor	r25, r25
 2c2:	e8 94       	clt
 2c4:	21 91       	ld	r18, Z+
 2c6:	20 32       	cpi	r18, 0x20	; 32
 2c8:	e9 f3       	breq	.-6      	; 0x2c4 <atoi+0x8>
 2ca:	29 30       	cpi	r18, 0x09	; 9
 2cc:	10 f0       	brcs	.+4      	; 0x2d2 <atoi+0x16>
 2ce:	2e 30       	cpi	r18, 0x0E	; 14
 2d0:	c8 f3       	brcs	.-14     	; 0x2c4 <atoi+0x8>
 2d2:	2b 32       	cpi	r18, 0x2B	; 43
 2d4:	41 f0       	breq	.+16     	; 0x2e6 <atoi+0x2a>
 2d6:	2d 32       	cpi	r18, 0x2D	; 45
 2d8:	39 f4       	brne	.+14     	; 0x2e8 <atoi+0x2c>
 2da:	68 94       	set
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <atoi+0x2a>
 2de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__mulhi_const_10>
 2e2:	82 0f       	add	r24, r18
 2e4:	91 1d       	adc	r25, r1
 2e6:	21 91       	ld	r18, Z+
 2e8:	20 53       	subi	r18, 0x30	; 48
 2ea:	2a 30       	cpi	r18, 0x0A	; 10
 2ec:	c0 f3       	brcs	.-16     	; 0x2de <atoi+0x22>
 2ee:	1e f4       	brtc	.+6      	; 0x2f6 <atoi+0x3a>
 2f0:	90 95       	com	r25
 2f2:	81 95       	neg	r24
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	08 95       	ret

000002f8 <__mulhi_const_10>:
 2f8:	7a e0       	ldi	r23, 0x0A	; 10
 2fa:	97 9f       	mul	r25, r23
 2fc:	90 2d       	mov	r25, r0
 2fe:	87 9f       	mul	r24, r23
 300:	80 2d       	mov	r24, r0
 302:	91 0d       	add	r25, r1
 304:	11 24       	eor	r1, r1
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
